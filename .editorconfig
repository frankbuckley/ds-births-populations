# top-most EditorConfig file
root = true

# Don't use tabs for indentation.
[*]
charset = utf-8
indent_style = space
trim_trailing_whitespace = true
insert_final_newline = true
guidelines = 120
max_line_length = 120
# (Please don't specify an indent_size here; that has too many unintended consequences.)

# Code files
[*.{cs,csx,vb,vbx}]
tab_width = 4
end_of_line = crlf
indent_size = 4

# Razor files
[*.{cshtml,razor}]
indent_size = 4
charset = utf-8-bom

# HTML files
[*.{html,htm}]
indent_size = 4

# Resx files
[*.resx]
indent_size = 4

# XML project files
[*.{csproj,vbproj,vcxproj,vcxproj.filters,proj,projitems,shproj}]
indent_size = 2

# XML config files
[*.{props,targets,ruleset,config,nuspec,resx,vsixmanifest,vsct}]
indent_size = 2

# CSS
[*.{css,scss,sass}]
indent_size = 2

# Javascript,Typescript
[*.{js,ts}]
indent_size = 2

# JSON files
[*.json]
indent_size = 2

# Powershell files
[*.ps1]
indent_size = 2

# Shell script files
[*.sh]
end_of_line = lf
indent_size = 2

[*.{cmd,bat}]
end_of_line = crlf
indent_size = 2

# C++ Files
[*.{cpp,h,in}]
curly_bracket_next_line = true
indent_brace_style = Allman

# Xml project files
[*.{csproj,vbproj,vcxproj,vcxproj.filters,proj,nativeproj,locproj}]
indent_size = 2

[*.{csproj,vbproj,proj,nativeproj,locproj}]
charset = utf-8

# Xml build files
[*.builds]
indent_size = 2

# Xml files
[*.{xml,stylecop,resx,ruleset}]
indent_size = 2

# Xml config files
[*.{props,targets,config,nuspec,appxmanifest,manifest,plist}]
indent_size = 2

# YAML config files
[*.{yml,yaml}]
indent_size = 2

# C# files
[*.cs]

# New line preferences
csharp_new_line_before_catch = true
csharp_new_line_before_else = true
csharp_new_line_before_finally = true
csharp_new_line_before_members_in_anonymous_types = true
csharp_new_line_before_members_in_object_initializers = true
csharp_new_line_before_open_brace = all
csharp_new_line_between_query_expression_clauses = true

# Indentation preferences
csharp_indent_block_contents = true
csharp_indent_braces = false
csharp_indent_case_contents = true
csharp_indent_case_contents_when_block = false
csharp_indent_labels = one_less_than_current
csharp_indent_switch_labels = true

# Modifier preferences
csharp_prefer_static_local_function = true
csharp_preferred_modifier_order = public, private, protected, internal, static, extern, new, virtual, abstract, sealed, override, readonly, unsafe, volatile, async:suggestion
csharp_style_prefer_readonly_struct = true:suggestion

# avoid this. unless absolutely necessary
dotnet_style_qualification_for_event = false:suggestion
dotnet_style_qualification_for_field = false:suggestion
dotnet_style_qualification_for_method = false:suggestion
dotnet_style_qualification_for_property = false:suggestion

# Types: use var
csharp_style_var_for_built_in_types = true:suggestion
csharp_style_var_when_type_is_apparent = true:suggestion
csharp_style_var_elsewhere = true:suggestion
dotnet_style_predefined_type_for_locals_parameters_members = true:suggestion
dotnet_style_predefined_type_for_member_access = true:suggestion

# Parentheses preferences
dotnet_style_parentheses_in_arithmetic_binary_operators = always_for_clarity:suggestion
dotnet_style_parentheses_in_other_binary_operators = always_for_clarity:suggestion
dotnet_style_parentheses_in_other_operators = never_if_unnecessary:suggestion
dotnet_style_parentheses_in_relational_binary_operators = always_for_clarity:suggestion

# Modifier preferences
dotnet_style_require_accessibility_modifiers = for_non_interface_members:suggestion

# name all types using PascalCase
dotnet_naming_rule.types_should_be_pascal_case.severity = suggestion
dotnet_naming_rule.types_should_be_pascal_case.symbols = types
dotnet_naming_rule.types_should_be_pascal_case.style = pascal_case

dotnet_naming_rule.non_field_members_should_be_pascal_case.severity = suggestion
dotnet_naming_rule.non_field_members_should_be_pascal_case.symbols = non_field_members
dotnet_naming_rule.non_field_members_should_be_pascal_case.style = pascal_case

# name all constant fields using PascalCase
dotnet_naming_rule.constant_fields_should_be_pascal_case.severity = suggestion
dotnet_naming_rule.constant_fields_should_be_pascal_case.style = pascal_case_style
dotnet_naming_rule.constant_fields_should_be_pascal_case.symbols = constant_fields
dotnet_naming_style.pascal_case_style.capitalization = pascal_case
dotnet_naming_symbols.constant_fields.applicable_kinds = field
dotnet_naming_symbols.constant_fields.required_modifiers = const

# static fields should have s_ prefix
dotnet_naming_rule.static_fields_should_have_prefix.severity = suggestion
dotnet_naming_rule.static_fields_should_have_prefix.style = static_prefix_style
dotnet_naming_rule.static_fields_should_have_prefix.symbols = static_fields
dotnet_naming_style.static_prefix_style.capitalization = camel_case
dotnet_naming_style.static_prefix_style.required_prefix = s_
dotnet_naming_symbols.static_fields.applicable_accessibilities = private, internal, private_protected
dotnet_naming_symbols.static_fields.applicable_kinds = field
dotnet_naming_symbols.static_fields.required_modifiers = static

# internal and private fields should be _camelCase
dotnet_naming_rule.camel_case_for_private_internal_fields.severity = suggestion
dotnet_naming_rule.camel_case_for_private_internal_fields.style = camel_case_underscore_style
dotnet_naming_rule.camel_case_for_private_internal_fields.symbols = private_internal_fields
dotnet_naming_style.camel_case_underscore_style.capitalization = camel_case
dotnet_naming_style.camel_case_underscore_style.required_prefix = _
dotnet_naming_symbols.private_internal_fields.applicable_accessibilities = private, internal
dotnet_naming_symbols.private_internal_fields.applicable_kinds = field

# interfaces should have I prefix
dotnet_naming_rule.interface_should_be_begins_with_i.severity = suggestion
dotnet_naming_rule.interface_should_be_begins_with_i.symbols = interface
dotnet_naming_rule.interface_should_be_begins_with_i.style = begins_with_i

# Symbol specifications

dotnet_naming_symbols.interface.applicable_kinds = interface
dotnet_naming_symbols.interface.applicable_accessibilities = public, internal, private, protected, protected_internal, private_protected
dotnet_naming_symbols.interface.required_modifiers =

dotnet_naming_symbols.types.applicable_kinds = class, struct, interface, enum
dotnet_naming_symbols.types.applicable_accessibilities = public, internal, private, protected, protected_internal, private_protected
dotnet_naming_symbols.types.required_modifiers =

dotnet_naming_symbols.non_field_members.applicable_kinds = property, event, method
dotnet_naming_symbols.non_field_members.applicable_accessibilities = public, internal, private, protected, protected_internal, private_protected
dotnet_naming_symbols.non_field_members.required_modifiers =

# Organize usings
dotnet_separate_import_directive_groups = false
dotnet_sort_system_directives_first = true

# 'using' directive preferences
csharp_using_directive_placement = outside_namespace:suggestion

# Prefer explicit constructors
csharp_style_prefer_primary_constructors = false:suggestion

# Code-block preferences
csharp_prefer_braces = true:suggestion
csharp_prefer_simple_using_statement = false:suggestion
csharp_style_namespace_declarations = file_scoped:suggestion
csharp_style_prefer_method_group_conversion = true:suggestion
csharp_style_prefer_top_level_statements = true:suggestion

# Wrapping preferences
csharp_preserve_single_line_blocks = false:suggestion
csharp_preserve_single_line_statements = true:suggestion

# Expression-level preferences
csharp_prefer_simple_default_expression = true
csharp_style_deconstructed_variable_declaration = true
csharp_style_implicit_object_creation_when_type_is_apparent = true:warning
csharp_style_inlined_variable_declaration = true
csharp_style_prefer_index_operator = true
csharp_style_prefer_local_over_anonymous_function = true:warning
csharp_style_prefer_null_check_over_type_check = true:warning
csharp_style_prefer_range_operator = true:warning
csharp_style_prefer_tuple_swap = true:warning
csharp_style_prefer_utf8_string_literals = true:warning
csharp_style_unused_value_assignment_preference = discard_variable:suggestion
csharp_style_unused_value_expression_statement_preference = discard_variable:suggestion
dotnet_style_coalesce_expression = true
dotnet_style_collection_initializer = true
dotnet_style_explicit_tuple_names = true
dotnet_style_namespace_match_folder = true
dotnet_style_null_propagation = true
dotnet_style_object_initializer = true
dotnet_style_operator_placement_when_wrapping = beginning_of_line
dotnet_style_prefer_auto_properties = false
dotnet_style_prefer_compound_assignment = true:warning
dotnet_style_prefer_conditional_expression_over_assignment = true:suggestion
dotnet_style_prefer_conditional_expression_over_return = false:suggestion # Use conditional expression for return
dotnet_style_prefer_foreach_explicit_cast_in_source = when_strongly_typed
dotnet_style_prefer_inferred_anonymous_type_member_names = true:suggestion
dotnet_style_prefer_inferred_tuple_names = true:suggestion
dotnet_style_prefer_is_null_check_over_reference_equality_method = true:suggestion
dotnet_style_prefer_simplified_boolean_expressions = true:suggestion
dotnet_style_prefer_simplified_interpolation = true:warning

# Field preferences
dotnet_style_readonly_field = true:suggestion

# Parameter preferences
dotnet_code_quality_unused_parameters = non_public:suggestion

# Suppression preferences
dotnet_remove_unnecessary_suppression_exclusions = 0

# New line preferences
dotnet_style_allow_multiple_blank_lines_experimental = false:suggestion
dotnet_style_allow_statement_immediately_after_block_experimental = false:suggestion

# Expression-bodied members
csharp_style_expression_bodied_accessors = true:suggestion
csharp_style_expression_bodied_constructors = false:suggestion
csharp_style_expression_bodied_indexers = true:suggestion
csharp_style_expression_bodied_lambdas = true:suggestion
csharp_style_expression_bodied_local_functions = false:suggestion
csharp_style_expression_bodied_methods = false:suggestion
csharp_style_expression_bodied_operators = false:suggestion
csharp_style_expression_bodied_properties = true:suggestion

# Pattern matching preferences
csharp_style_pattern_matching_over_as_with_null_check = true:suggestion
csharp_style_pattern_matching_over_is_with_cast_check = true:suggestion
csharp_style_prefer_extended_property_pattern = true:warning
csharp_style_prefer_not_pattern = true:warning
csharp_style_prefer_pattern_matching = true:suggestion
csharp_style_prefer_switch_expression = true:suggestion

# Null checking preferences
csharp_style_throw_expression = false:suggestion
csharp_style_conditional_delegate_call = true:suggestion

# New line preferences
csharp_style_allow_blank_line_after_colon_in_constructor_initializer_experimental = true
csharp_style_allow_blank_lines_between_consecutive_braces_experimental = false:suggestion
csharp_style_allow_embedded_statements_on_same_line_experimental = false:suggestion

# Space preferences
csharp_space_after_cast = false
csharp_space_after_colon_in_inheritance_clause = true
csharp_space_after_comma = true
csharp_space_after_dot = false
csharp_space_after_keywords_in_control_flow_statements = true
csharp_space_after_semicolon_in_for_statement = true
csharp_space_around_binary_operators = before_and_after
csharp_space_around_declaration_statements = false
csharp_space_before_colon_in_inheritance_clause = true
csharp_space_before_comma = false
csharp_space_before_dot = false
csharp_space_before_open_square_brackets = false
csharp_space_before_semicolon_in_for_statement = false
csharp_space_between_empty_square_brackets = false
csharp_space_between_method_call_empty_parameter_list_parentheses = false
csharp_space_between_method_call_name_and_opening_parenthesis = false
csharp_space_between_method_call_parameter_list_parentheses = false
csharp_space_between_method_declaration_empty_parameter_list_parentheses = false
csharp_space_between_method_declaration_name_and_open_parenthesis = false
csharp_space_between_method_declaration_parameter_list_parentheses = false
csharp_space_between_parentheses = false
csharp_space_between_square_brackets = false
csharp_style_prefer_primary_constructors = false
dotnet_diagnostic.CA1805.severity = suggestion

# Other features
csharp_style_pattern_local_over_anonymous_function = false:none
dotnet_code_quality_unused_parameters = non_public:suggestion

# Design rules
dotnet_diagnostic.CA1000.severity = warning # CA1000: Do not declare static members on generic types
dotnet_diagnostic.CA1001.severity = error # CA1001: Types that own disposable fields should be disposable
dotnet_diagnostic.CA1002.severity = warning # CA1002: Do not expose generic lists
dotnet_diagnostic.CA1003.severity = suggestion # CA1003: Use generic event handler instances
dotnet_diagnostic.CA1005.severity = suggestion # CA1005: Avoid excessive parameters on generic types
dotnet_diagnostic.CA1008.severity = error # CA1008: Enums should have zero value
dotnet_diagnostic.CA1010.severity = error # CA1010: Collections should implement generic interface
dotnet_diagnostic.CA1012.severity = error # CA1012: Abstract types should not have public constructors
dotnet_diagnostic.CA1014.severity = none # CA1014: Mark assemblies with CLSCompliantAttribute
dotnet_diagnostic.CA1016.severity = warning # CA1016: Mark assemblies with AssemblyVersionAttribute
dotnet_diagnostic.CA1017.severity = none # CA1017: Mark assemblies with ComVisibleAttribute
dotnet_diagnostic.CA1018.severity = warning # CA1018: Mark attributes with AttributeUsageAttribute
dotnet_diagnostic.CA1019.severity = warning # CA1019: Define accessors for attribute arguments
dotnet_diagnostic.CA1021.severity = suggestion # CA1021: Avoid out parameters
dotnet_diagnostic.CA1024.severity = warning # CA1024: Use properties where appropriate
dotnet_diagnostic.CA1027.severity = warning # CA1027: Mark enums with FlagsAttribute
dotnet_diagnostic.CA1028.severity = suggestion # CA1028: Enum storage should be Int32
dotnet_diagnostic.CA1030.severity = warning # CA1030: Use events where appropriate
dotnet_diagnostic.CA1031.severity = warning # CA1031: Do not catch general exception types
dotnet_diagnostic.CA1032.severity = suggestion # CA1032: Implement standard exception constructors
dotnet_diagnostic.CA1033.severity = warning # CA1033: Interface methods should be callable by child types
dotnet_diagnostic.CA1034.severity = warning # CA1034: Nested types should not be visible
dotnet_diagnostic.CA1036.severity = warning # CA1036: Override methods on comparable types
dotnet_diagnostic.CA1040.severity = warning # CA1040: Avoid empty interfaces
dotnet_diagnostic.CA1041.severity = warning # CA1041: Provide ObsoleteAttribute message
dotnet_diagnostic.CA1043.severity = error # CA1043: Use integral or string argument for indexers
dotnet_diagnostic.CA1044.severity = error # CA1044: Properties should not be write only
dotnet_diagnostic.CA1045.severity = suggestion # CA1045: Do not pass types by reference
dotnet_diagnostic.CA1046.severity = warning # CA1046: Do not overload operator equals on reference types message
dotnet_diagnostic.CA1047.severity = warning # CA1047: Do not declare protected members in sealed types
dotnet_diagnostic.CA1050.severity = warning # CA1050: Declare types in namespaces
dotnet_diagnostic.CA1051.severity = warning # CA1051: Do not declare visible instance fields
dotnet_diagnostic.CA1052.severity = warning # CA1052: Static holder types should be Static or NotInheritable
dotnet_diagnostic.CA1053.severity = warning # CA1053: Static holder types should not have default constructors
dotnet_diagnostic.CA1054.severity = warning # CA1054: URI parameters should not be strings
dotnet_diagnostic.CA1055.severity = warning # CA1055: URI return values should not be strings
dotnet_diagnostic.CA1056.severity = warning # CA1056: URI properties should not be strings
dotnet_diagnostic.CA1058.severity = warning # CA1058: Types should not extend certain base types
dotnet_diagnostic.CA1060.severity = warning # CA1060: Move P/Invokes to NativeMethods class
dotnet_diagnostic.CA1061.severity = warning # CA1061: Do not hide base class methods
dotnet_diagnostic.CA1062.severity = warning # CA1062: Validate arguments of public methods
dotnet_diagnostic.CA1063.severity = error # CA1063: Implement IDisposable correctly
dotnet_diagnostic.CA1064.severity = error # CA1064: Exceptions should be public
dotnet_diagnostic.CA1065.severity = warning # CA1065: Do not raise exceptions in unexpected locations
dotnet_diagnostic.CA1066.severity = error # CA1066: Implement IEquatable when overriding Equals
dotnet_diagnostic.CA1067.severity = error # CA1067: Override Equals when implementing IEquatable
dotnet_diagnostic.CA1068.severity = error # CA1068: CancellationToken parameters must come last
dotnet_diagnostic.CA1069.severity = error # CA1069: Enums should not have duplicate values
dotnet_diagnostic.CA1070.severity = error # CA1070: Do not declare event fields as virtual


# Globalization rules
dotnet_diagnostic.CA1307.severity = error # CA1307: Specify StringComparison for clarity
dotnet_diagnostic.CA1308.severity = none # CA1308: Normalize strings to uppercase
dotnet_diagnostic.CA1309.severity = error # CA1309: Use ordinal StringComparison
dotnet_diagnostic.CA1311.severity = error # CA1311: Specify a culture or use an invariant version

# Portability and interoperability rules
dotnet_diagnostic.CA1401.severity = error # CA1401: P/Invokes should not be visible
dotnet_diagnostic.CA1416.severity = warning # CA1416: Validate platform compatibility
dotnet_diagnostic.CA1417.severity = error # CA1417: Do not use OutAttribute on string parameters for P/Invokes
dotnet_diagnostic.CA1418.severity = warning # CA1418: Validate platform compatibility
dotnet_diagnostic.CA1419.severity = error # CA1419: Provide a parameterless constructor that is as visible as the containing type for concrete types derived from 'System.Runtime.InteropServices.SafeHandle'
dotnet_diagnostic.CA1420.severity = error # CA1420: Property, type, or attribute requires runtime marshalling
dotnet_diagnostic.CA1421.severity = error # CA1421: Method uses runtime marshalling when DisableRuntimeMarshallingAttribute is applied
dotnet_diagnostic.CA1422.severity = error # CA1422: Validate platform compatibility - obsoleted APIs

# Maintainability rules
dotnet_diagnostic.CA1501.severity = suggestion # CA1501: Avoid excessive inheritance
dotnet_diagnostic.CA1502.severity = suggestion # CA1502: Avoid excessive complexity
dotnet_diagnostic.CA1505.severity = suggestion # CA1505: Avoid unmaintainable code
dotnet_diagnostic.CA1506.severity = suggestion # CA1506: Avoid excessive class coupling
dotnet_diagnostic.CA1507.severity = warning # CA1507: Use nameof in place of string
dotnet_diagnostic.CA1508.severity = warning # CA1508: Avoid dead conditional code
dotnet_diagnostic.CA1509.severity = error # CA1509: Invalid entry in code metrics configuration file

# Naming rules
dotnet_diagnostic.CA1700.severity = warning # CA1700: Do not name enum values 'Reserved'
dotnet_diagnostic.CA1707.severity = suggestion # CA1707: Identifiers should not contain underscores
dotnet_diagnostic.CA1708.severity = warning # CA1708: Identifiers should differ by more than case
dotnet_diagnostic.CA1710.severity = warning # CA1710: Identifiers should have correct suffix
dotnet_diagnostic.CA1711.severity = suggestion # CA1711: Identifiers should not have incorrect suffix
dotnet_diagnostic.CA1712.severity = warning # CA1712: Do not prefix enum values with type name
dotnet_diagnostic.CA1715.severity = warning # CA1715: Identifiers should have correct prefix
dotnet_diagnostic.CA1716.severity = warning # CA1716: Identifiers should not match keywords
dotnet_diagnostic.CA1717.severity = warning # CA1717: Only FlagsAttribute enums should have plural names
dotnet_diagnostic.CA1720.severity = suggestion # CA1720: Identifiers should not contain type names
dotnet_diagnostic.CA1721.severity = suggestion # CA1721: Property names should not match get methods
dotnet_diagnostic.CA1724.severity = suggestion # CA1724: Type names should not match namespaces
dotnet_diagnostic.CA1725.severity = warning # CA1725: Parameter names should match base declaration
dotnet_diagnostic.CA1727.severity = suggestion # CA1727: Use PascalCase for named placeholders

# Performance rules
dotnet_diagnostic.CA1802.severity = warning # CA1802: Use Literals Where Appropriate
dotnet_diagnostic.CA1805.severity = warning # CA1805: Do not initialize unnecessarily
dotnet_diagnostic.CA1806.severity = warning # CA1806: Do not ignore method results
dotnet_diagnostic.CA1810.severity = warning # CA1810: Initialize reference type static fields inline
dotnet_diagnostic.CA1812.severity = suggestion # CA1812: Avoid uninstantiated internal classes
dotnet_diagnostic.CA1813.severity = warning # CA1813: Avoid unsealed attributes
dotnet_diagnostic.CA1814.severity = warning # CA1814: Prefer jagged arrays over multidimensional
dotnet_diagnostic.CA1815.severity = warning # CA1815: Override equals and operator equals on value types
dotnet_diagnostic.CA1819.severity = warning # CA1819: Properties should not return arrays
dotnet_diagnostic.CA1820.severity = warning # CA1820: Test for empty strings using string length
dotnet_diagnostic.CA1821.severity = warning # CA1821: Remove empty finalizers
dotnet_diagnostic.CA1822.severity = warning # CA1822: Mark members as static
dotnet_diagnostic.CA1823.severity = warning # CA1823: Avoid unused private fields
dotnet_diagnostic.CA1824.severity = error # CA1824: Mark assemblies with NeutralResourcesLanguageAttribute
dotnet_diagnostic.CA1825.severity = error # CA1825: Avoid zero-length array allocations
dotnet_diagnostic.CA1826.severity = error # CA1826: Use property instead of Linq Enumerable method
dotnet_diagnostic.CA1827.severity = error # CA1827: Do not use Count/LongCount when Any can be used
dotnet_diagnostic.CA1828.severity = error # CA1828: Do not use CountAsync/LongCountAsync when AnyAsync can be used
dotnet_diagnostic.CA1829.severity = error # CA1829: Use Length/Count property instead of Enumerable.Count methodused
dotnet_diagnostic.CA1830.severity = error # CA1830: Prefer strongly-typed Append and Insert method overloads on StringBuilderdelegates
dotnet_diagnostic.CA1831.severity = error # CA1831: Use AsSpan instead of Range-based indexers for string when appropriate
dotnet_diagnostic.CA1832.severity = error # CA1832: Use AsSpan or AsMemory instead of Range-based indexers for getting ReadOnlySpan or ReadOnlyMemory portion of an array
dotnet_diagnostic.CA1833.severity = error # CA1833: Use AsSpan or AsMemory instead of Range-based indexers for getting Span or Memory portion of an array
dotnet_diagnostic.CA1834.severity = error # CA1834: Use StringBuilder.Append(char) for single character strings
dotnet_diagnostic.CA1835.severity = error # CA1835: Prefer the memory-based overloads of ReadAsync/WriteAsync methods in stream-based classes
dotnet_diagnostic.CA1836.severity = error # CA1836: Prefer IsEmpty over Count when available
dotnet_diagnostic.CA1837.severity = error # CA1837: Use Environment.ProcessId instead of Process.GetCurrentProcess().Id
dotnet_diagnostic.CA1838.severity = error # CA1838: Avoid StringBuilder parameters for P/InvokesId
dotnet_diagnostic.CA1839.severity = error # CA1839: Use Environment.ProcessPath instead of Process.GetCurrentProcess().MainModule.FileName
dotnet_diagnostic.CA1840.severity = error # CA1840: Use Environment.CurrentManagedThreadId instead of Thread.CurrentThread.ManagedThreadId
dotnet_diagnostic.CA1841.severity = error # CA1841: Prefer Dictionary Contains methods
dotnet_diagnostic.CA1842.severity = error # CA1842: Do not use 'WhenAll' with a single task
dotnet_diagnostic.CA1843.severity = error # CA1843: Do not use 'WaitAll' with a single task
dotnet_diagnostic.CA1844.severity = error # CA1844: Provide memory-based overrides of async methods when subclassing 'Stream'
dotnet_diagnostic.CA1845.severity = error # CA1845: Use span-based 'string.Concat'
dotnet_diagnostic.CA1846.severity = error # CA1846: Prefer AsSpan over Substring
dotnet_diagnostic.CA1847.severity = error # CA1847: Use string.Contains(char) instead of string.Contains(string) with single characters
dotnet_diagnostic.CA1848.severity = suggestion # CA1848: Use the LoggerMessage delegates
dotnet_diagnostic.CA1849.severity = error # CA1849: Call async methods when in an async method
dotnet_diagnostic.CA1850.severity = error # CA1850: Prefer static HashData method over ComputeHash
dotnet_diagnostic.CA1851.severity = warning # CA1851: Possible multiple enumerations of IEnumerable collection
dotnet_diagnostic.CA1852.severity = warning # CA1852: Seal internal types
dotnet_diagnostic.CA1853.severity = error # CA1853: Unnecessary call to 'Dictionary.ContainsKey(key)'
dotnet_diagnostic.CA1854.severity = error # CA1854: Prefer the IDictionary.TryGetValue(TKey, out TValue) method
dotnet_diagnostic.CA1855.severity = error # CA1855: Use Span<T>.Clear() instead of Span<T>.Fill()
dotnet_diagnostic.CA1858.severity = error # CA1858: Use StartsWith instead of IndexOf

# Usage rules
dotnet_diagnostic.CA1801.severity = warning # CA1801: Review unused parameters
dotnet_diagnostic.CA1816.severity = error # CA1816: Call GC.SuppressFinalize correctly
dotnet_diagnostic.CA2200.severity = error # CA2200: Rethrow to preserve stack details
dotnet_diagnostic.CA2201.severity = error # CA2201: Do not raise reserved exception types
dotnet_diagnostic.CA2207.severity = error # CA2207: Initialize value type static fields inline
dotnet_diagnostic.CA2208.severity = warning # CA2208: Instantiate argument exceptions correctly
dotnet_diagnostic.CA2211.severity = warning # CA2211: Non-constant fields should not be visible
dotnet_diagnostic.CA2213.severity = warning # CA2213: Disposable fields should be disposed
dotnet_diagnostic.CA2214.severity = warning # CA2214: Do not call overridable methods in constructors
dotnet_diagnostic.CA2215.severity = warning # CA2215: Dispose methods should call base class dispose
dotnet_diagnostic.CA2216.severity = warning # CA2216: Disposable types should declare finalizer
dotnet_diagnostic.CA2217.severity = warning # CA2217: Do not mark enums with FlagsAttribute
dotnet_diagnostic.CA2218.severity = warning # CA2218: Override GetHashCode on overriding Equals
dotnet_diagnostic.CA2219.severity = warning # CA2219: Do not raise exceptions in exception clauses
dotnet_diagnostic.CA2224.severity = warning # CA2224: Override Equals on overloading operator equals
dotnet_diagnostic.CA2225.severity = warning # CA2225: Operator overloads have named alternates
dotnet_diagnostic.CA2226.severity = warning # CA2226: Operators should have symmetrical overloads
dotnet_diagnostic.CA2227.severity = warning # CA2227: Collection properties should be read only
dotnet_diagnostic.CA2229.severity = warning # CA2229: Implement serialization constructors
dotnet_diagnostic.CA2231.severity = warning # CA2231: Overload operator equals on overriding ValueType.Equals
dotnet_diagnostic.CA2234.severity = warning # CA2234: Pass System.Uri objects instead of strings
dotnet_diagnostic.CA2235.severity = warning # CA2235: Mark all non-serializable fields
dotnet_diagnostic.CA2237.severity = warning # CA2237: Mark ISerializable types with SerializableAttribute
dotnet_diagnostic.CA2241.severity = warning # CA2241: Provide correct arguments to formatting methods
dotnet_diagnostic.CA2242.severity = error # CA2242: Test for NaN correctly
dotnet_diagnostic.CA2243.severity = warning # CA2243: Attribute string literals should parse correctly
dotnet_diagnostic.CA2244.severity = warning # CA2244: Do not duplicate indexed element initializations
dotnet_diagnostic.CA2245.severity = error # CA2245: Do not assign a property to itself
dotnet_diagnostic.CA2246.severity = error # CA2246: Do not assign a symbol and its member in the same statement
dotnet_diagnostic.CA2247.severity = error # CA2247: Argument passed to TaskCompletionSource constructor should be TaskCreationOptions enum instead of TaskContinuationOptions enum
dotnet_diagnostic.CA2248.severity = error # CA2248: Provide correct enum argument to Enum.HasFlag
dotnet_diagnostic.CA2249.severity = warning # CA2249: Consider using String.Contains instead of String.IndexOf
dotnet_diagnostic.CA2250.severity = warning # CA2250: Use ThrowIfCancellationRequested
dotnet_diagnostic.CA2251.severity = warning # CA2251: Use String.Equals over String.Compare
dotnet_diagnostic.CA2252.severity = warning # CA2252: Opt in to preview features before using them.Compare
dotnet_diagnostic.CA2253.severity = warning # CA2253: Named placeholders should not be numeric values
dotnet_diagnostic.CA2254.severity = warning # CA2254: Template should be a static expression
dotnet_diagnostic.CA2255.severity = warning # CA2255: The ModuleInitializer attribute should not be used in libraries
dotnet_diagnostic.CA2256.severity = warning # CA2256: All members declared in parent interfaces must have an implementation in a DynamicInterfaceCastableImplementation-attributed interface
dotnet_diagnostic.CA2257.severity = warning # CA2257: Members defined on an interface with the 'DynamicInterfaceCastableImplementationAttribute' should be 'static'
dotnet_diagnostic.CA2259.severity = error # CA2259: Ensure ThreadStatic is only used with static fields
dotnet_diagnostic.CA2260.severity = error # CA2260: Implement generic math interfaces correctly

# Reliability rules
dotnet_diagnostic.CA2000.severity = warning # CA2000: Dispose objects before losing scope
dotnet_diagnostic.CA2002.severity = warning # CA2002: Do not lock on objects with weak identity
dotnet_diagnostic.CA2007.severity = warning # CA2007: Do not directly await a Task
dotnet_diagnostic.CA2008.severity = warning # CA2008: Do not create tasks without passing a TaskScheduler
dotnet_diagnostic.CA2009.severity = warning # CA2009: Do not call ToImmutableCollection on an ImmutableCollection value
dotnet_diagnostic.CA2011.severity = error # CA2011: Do not assign property within its setter
dotnet_diagnostic.CA2012.severity = error # CA2012: Use ValueTasks correctly
dotnet_diagnostic.CA2013.severity = error # CA2013: Do not use ReferenceEquals with value types
dotnet_diagnostic.CA2014.severity = error # CA2014: Do not use stackalloc in loops
dotnet_diagnostic.CA2015.severity = error # CA2015: Do not define finalizers for types derived from MemoryManager<T>
dotnet_diagnostic.CA2016.severity = warning # CA2016: Forward the CancellationToken parameter to methods that take one
dotnet_diagnostic.CA2017.severity = warning # CA2017: Parameter count mismatch
dotnet_diagnostic.CA2018.severity = error # CA2018: The count argument to Buffer.BlockCopy should specify the number of bytes to copy
dotnet_diagnostic.CA2019.severity = error # CA2019: ThreadStatic fields should not use inline initialization
dotnet_diagnostic.CA2020.severity = error # CA2020: Prevent behavioral change caused by built-in operators of IntPtr/UIntPtr

# Security rules
dotnet_diagnostic.CA2100.severity = warning # CA2100: Review SQL queries for security vulnerabilities
dotnet_diagnostic.CA2109.severity = warning # CA2109: Review visible event handlers
dotnet_diagnostic.CA2119.severity = warning # CA2119: Seal methods that satisfy private interfaces
dotnet_diagnostic.CA2153.severity = error # CA2153: Avoid handling Corrupted State Exceptions
dotnet_diagnostic.CA2300.severity = error # CA2300: Do not use insecure deserializer BinaryFormatter
dotnet_diagnostic.CA2301.severity = error # CA2301: Do not call BinaryFormatter.Deserialize without first setting BinaryFormatter.Binder
dotnet_diagnostic.CA2302.severity = error # CA2302: Ensure BinaryFormatter.Binder is set before calling BinaryFormatter.Deserialize
dotnet_diagnostic.CA2305.severity = error # CA2305: Do not use insecure deserializer LosFormatter
dotnet_diagnostic.CA2310.severity = error # CA2310: Do not use insecure deserializer NetDataContractSerializer
dotnet_diagnostic.CA2311.severity = error # CA2311: Do not deserialize without first setting NetDataContractSerializer.Binder
dotnet_diagnostic.CA2312.severity = error # CA2312: Ensure NetDataContractSerializer.Binder is set before deserializing
dotnet_diagnostic.CA2315.severity = error # CA2315: Do not use insecure deserializer ObjectStateFormatter
dotnet_diagnostic.CA2321.severity = error # CA2321: Do not deserialize with JavaScriptSerializer using a SimpleTypeResolver
dotnet_diagnostic.CA2322.severity = error # CA2322: Ensure JavaScriptSerializer is not initialized with SimpleTypeResolver before deserializing
dotnet_diagnostic.CA2326.severity = error # CA2326: Do not use TypeNameHandling values other than None
dotnet_diagnostic.CA2327.severity = error # CA2327: Do not use insecure JsonSerializerSettings
dotnet_diagnostic.CA2328.severity = error # CA2328: Ensure that JsonSerializerSettings are secure
dotnet_diagnostic.CA2329.severity = error # CA2329: Do not deserialize with JsonSerializer using an insecure configuration
dotnet_diagnostic.CA2330.severity = error # CA2330: Ensure that JsonSerializer has a secure configuration when deserializing
dotnet_diagnostic.CA2350.severity = error # CA2350: Ensure DataTable.ReadXml()'s input is trusted
dotnet_diagnostic.CA2351.severity = error # CA2351: Ensure DataSet.ReadXml()'s input is trusted
dotnet_diagnostic.CA2352.severity = error # CA2352: Unsafe DataSet or DataTable in serializable type can be vulnerable to remote code execution attacks
dotnet_diagnostic.CA2353.severity = error # CA2353: Unsafe DataSet or DataTable in serializable type
dotnet_diagnostic.CA2354.severity = error # CA2354: Unsafe DataSet or DataTable in deserialized object graph can be vulnerable to remote code execution attack
dotnet_diagnostic.CA2355.severity = error # CA2355: Unsafe DataSet or DataTable in deserialized object graph
dotnet_diagnostic.CA2356.severity = error # CA2356: Unsafe DataSet or DataTable type in web deserialized object graph
dotnet_diagnostic.CA2361.severity = error # CA2361: Ensure autogenerated class containing DataSet.ReadXml() is not used with untrusted data
dotnet_diagnostic.CA2362.severity = error # CA2362: Unsafe DataSet or DataTable in autogenerated serializable type can be vulnerable to remote code execution attacks
dotnet_diagnostic.CA3001.severity = warning # CA3001: Review code for SQL injection vulnerabilities
dotnet_diagnostic.CA3002.severity = warning # CA3002: Review code for XSS vulnerabilities
dotnet_diagnostic.CA3003.severity = warning # CA3003: Review code for file path injection vulnerabilities
dotnet_diagnostic.CA3004.severity = warning # CA3004: Review code for information disclosure vulnerabilities
dotnet_diagnostic.CA3005.severity = warning # CA3005: Review code for LDAP injection vulnerabilities
dotnet_diagnostic.CA3006.severity = warning # CA3006: Review code for process command injection vulnerabilities
dotnet_diagnostic.CA3007.severity = warning # CA3007: Review code for open redirect vulnerabilities
dotnet_diagnostic.CA3008.severity = warning # CA3008: Review code for XPath injection vulnerabilities
dotnet_diagnostic.CA3009.severity = warning # CA3009: Review code for XML injection vulnerabilities
dotnet_diagnostic.CA3010.severity = warning # CA3010: Review code for XAML injection vulnerabilities
dotnet_diagnostic.CA3011.severity = warning # CA3011: Review code for DLL injection vulnerabilities
dotnet_diagnostic.CA3012.severity = warning # CA3012: Review code for regex injection vulnerabilities
dotnet_diagnostic.CA3061.severity = warning # CA3061: Do not add schema by URL
dotnet_diagnostic.CA3075.severity = warning # CA3075: Insecure DTD Processing
dotnet_diagnostic.CA3076.severity = warning # CA3076: Insecure XSLT Script Execution
dotnet_diagnostic.CA3077.severity = warning # CA3077: Insecure Processing in API Design, XML Document and XML Text Reader
dotnet_diagnostic.CA3147.severity = warning # CA3147: Mark verb handlers with ValidateAntiForgeryToken
dotnet_diagnostic.CA5350.severity = error # CA5350: Do Not Use Weak Cryptographic Algorithms
dotnet_diagnostic.CA5351.severity = error # CA5351: Do Not Use Broken Cryptographic Algorithms
dotnet_diagnostic.CA5358.severity = error # CA5358: Do Not Use Unsafe Cipher Modes
dotnet_diagnostic.CA5359.severity = error # CA5359: Do not disable certificate validation
dotnet_diagnostic.CA5360.severity = error # CA5360: Do not call dangerous methods in deserialization
dotnet_diagnostic.CA5361.severity = error # CA5361: Do not disable SChannel use of strong crypto
dotnet_diagnostic.CA5362.severity = warning # CA5362: Potential reference cycle in deserialized object graph
dotnet_diagnostic.CA5363.severity = warning # CA5363: Do not disable request validation
dotnet_diagnostic.CA5364.severity = error # CA5364: Do not use deprecated security protocols
dotnet_diagnostic.CA5365.severity = warning # CA5365: Do Not Disable HTTP Header Checking
dotnet_diagnostic.CA5366.severity = warning # CA5366: Use XmlReader For DataSet Read XML
dotnet_diagnostic.CA5367.severity = error # CA5367: Do not serialize types with pointer fields
dotnet_diagnostic.CA5368.severity = error # CA5368: Set ViewStateUserKey For Classes Derived From Page fields
dotnet_diagnostic.CA5369.severity = warning # CA5369: Use XmlReader for Deserialize
dotnet_diagnostic.CA5370.severity = warning # CA5370: Use XmlReader for validating reader
dotnet_diagnostic.CA5371.severity = warning # CA5371: Use XmlReader for schema read
dotnet_diagnostic.CA5372.severity = warning # CA5372: Use XmlReader for XPathDocument
dotnet_diagnostic.CA5373.severity = warning # CA5373: Do not use obsolete key derivation function
dotnet_diagnostic.CA5374.severity = warning # CA5374: Do not use XslTransform
dotnet_diagnostic.CA5375.severity = warning # CA5375: Do not use account shared access signature
dotnet_diagnostic.CA5376.severity = warning # CA5376: Use SharedAccessProtocol HttpsOnly
dotnet_diagnostic.CA5377.severity = warning # CA5377: Use container level access policy
dotnet_diagnostic.CA5378.severity = warning # CA5378: Do not disable ServicePointManagerSecurityProtocols
dotnet_diagnostic.CA5379.severity = error # CA5379: Ensure key derivation function algorithm is sufficiently strong
dotnet_diagnostic.CA5380.severity = error # CA5380: Do not add certificates to root store
dotnet_diagnostic.CA5381.severity = error # CA5381: Ensure certificates are not added to root store
dotnet_diagnostic.CA5382.severity = error # CA5382: Use secure cookies in ASP.NET Core
dotnet_diagnostic.CA5383.severity = error # CA5383: Ensure use secure cookies in ASP.NET Core
dotnet_diagnostic.CA5384.severity = error # CA5384: Do not use digital signature algorithm (DSA)
dotnet_diagnostic.CA5385.severity = error # CA5385: Use Rivest–Shamir–Adleman (RSA) algorithm with sufficient key size
dotnet_diagnostic.CA5386.severity = error # CA5386: Avoid hardcoding SecurityProtocolType value
dotnet_diagnostic.CA5387.severity = error # CA5387: Do not use weak key derivation function with insufficient iteration count
dotnet_diagnostic.CA5388.severity = error # CA5388: Ensure sufficient iteration count when using weak key derivation function
dotnet_diagnostic.CA5389.severity = error # CA5389: Do not add archive item's path to the target file system path
dotnet_diagnostic.CA5390.severity = error # CA5390: Do not hard-code encryption key
dotnet_diagnostic.CA5391.severity = warning # CA5391: Use antiforgery tokens in ASP.NET Core MVC controllers
dotnet_diagnostic.CA5392.severity = warning # CA5392: Use DefaultDllImportSearchPaths attribute for P/Invokes
dotnet_diagnostic.CA5393.severity = warning # CA5393: Do not use unsafe DllImportSearchPath value
dotnet_diagnostic.CA5394.severity = warning # CA5394: Do not use insecure randomness
dotnet_diagnostic.CA5395.severity = warning # CA5395: Missing HttpVerb attribute for action methods
dotnet_diagnostic.CA5396.severity = warning # CA5396: Set HttpOnly to true for HttpCookie
dotnet_diagnostic.CA5397.severity = error # CA5397: Do not use deprecated SslProtocols valueskey
dotnet_diagnostic.CA5398.severity = error # CA5398: Avoid hardcoded SslProtocols values
dotnet_diagnostic.CA5399.severity = error # CA5399: Enable HttpClient certificate revocation list check
dotnet_diagnostic.CA5400.severity = error # CA5400: Ensure HttpClient certificate revocation list check is not disabled
dotnet_diagnostic.CA5401.severity = error # CA5401: Do not use CreateEncryptor with non-default IV
dotnet_diagnostic.CA5402.severity = error # CA5402: Use CreateEncryptor with the default IV
dotnet_diagnostic.CA5403.severity = error # CA5403: Do not hard-code certificate
dotnet_diagnostic.CA5404.severity = error # CA5404: Do not disable token validation checks
dotnet_diagnostic.CA5405.severity = error # CA5405: Do not always skip token validation in delegates

dotnet_diagnostic.IDE0045.severity = suggestion # IDE0045: Use conditional expression for assignment

# prevent code cleanup auto-'fixing' simple properties
dotnet_style_prefer_auto_properties = false:suggestion

# spelling
spelling_languages = en-us,en-gb
spelling_checkable_types = strings,identifiers,comments
spelling_error_severity = information
spelling_exclusion_path = .\spelling.dic

# License header
file_header_template = Copyright (c) Frank Buckley and Contributors. All Rights Reserved.\nFrank Buckley and Contributors licence this file to you under the MIT license.

# ReSharper properties
resharper_space_within_single_line_array_initializer_braces = true
resharper_wrap_object_and_collection_initializer_style = chop_always
